/*
Camunda Management API

Manage Camunda Clusters and API Clients via API.

API version: 1.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BackupDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupDto{}

// BackupDto struct for BackupDto
type BackupDto struct {
	Uuid string `json:"uuid"`
	Name string `json:"name"`
	Created string `json:"created"`
	Completed string `json:"completed"`
	Status BackupStatus `json:"status"`
	ZeebeStatus BackupStatus `json:"zeebeStatus"`
	TasklistStatus BackupStatus `json:"tasklistStatus"`
	OperateStatus BackupStatus `json:"operateStatus"`
	OptimizeStatus BackupStatus `json:"optimizeStatus"`
}

type _BackupDto BackupDto

// NewBackupDto instantiates a new BackupDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupDto(uuid string, name string, created string, completed string, status BackupStatus, zeebeStatus BackupStatus, tasklistStatus BackupStatus, operateStatus BackupStatus, optimizeStatus BackupStatus) *BackupDto {
	this := BackupDto{}
	this.Uuid = uuid
	this.Name = name
	this.Created = created
	this.Completed = completed
	this.Status = status
	this.ZeebeStatus = zeebeStatus
	this.TasklistStatus = tasklistStatus
	this.OperateStatus = operateStatus
	this.OptimizeStatus = optimizeStatus
	return &this
}

// NewBackupDtoWithDefaults instantiates a new BackupDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupDtoWithDefaults() *BackupDto {
	this := BackupDto{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *BackupDto) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *BackupDto) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *BackupDto) SetUuid(v string) {
	o.Uuid = v
}

// GetName returns the Name field value
func (o *BackupDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BackupDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BackupDto) SetName(v string) {
	o.Name = v
}

// GetCreated returns the Created field value
func (o *BackupDto) GetCreated() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *BackupDto) GetCreatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *BackupDto) SetCreated(v string) {
	o.Created = v
}

// GetCompleted returns the Completed field value
func (o *BackupDto) GetCompleted() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value
// and a boolean to check if the value has been set.
func (o *BackupDto) GetCompletedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Completed, true
}

// SetCompleted sets field value
func (o *BackupDto) SetCompleted(v string) {
	o.Completed = v
}

// GetStatus returns the Status field value
func (o *BackupDto) GetStatus() BackupStatus {
	if o == nil {
		var ret BackupStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BackupDto) GetStatusOk() (*BackupStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BackupDto) SetStatus(v BackupStatus) {
	o.Status = v
}

// GetZeebeStatus returns the ZeebeStatus field value
func (o *BackupDto) GetZeebeStatus() BackupStatus {
	if o == nil {
		var ret BackupStatus
		return ret
	}

	return o.ZeebeStatus
}

// GetZeebeStatusOk returns a tuple with the ZeebeStatus field value
// and a boolean to check if the value has been set.
func (o *BackupDto) GetZeebeStatusOk() (*BackupStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZeebeStatus, true
}

// SetZeebeStatus sets field value
func (o *BackupDto) SetZeebeStatus(v BackupStatus) {
	o.ZeebeStatus = v
}

// GetTasklistStatus returns the TasklistStatus field value
func (o *BackupDto) GetTasklistStatus() BackupStatus {
	if o == nil {
		var ret BackupStatus
		return ret
	}

	return o.TasklistStatus
}

// GetTasklistStatusOk returns a tuple with the TasklistStatus field value
// and a boolean to check if the value has been set.
func (o *BackupDto) GetTasklistStatusOk() (*BackupStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TasklistStatus, true
}

// SetTasklistStatus sets field value
func (o *BackupDto) SetTasklistStatus(v BackupStatus) {
	o.TasklistStatus = v
}

// GetOperateStatus returns the OperateStatus field value
func (o *BackupDto) GetOperateStatus() BackupStatus {
	if o == nil {
		var ret BackupStatus
		return ret
	}

	return o.OperateStatus
}

// GetOperateStatusOk returns a tuple with the OperateStatus field value
// and a boolean to check if the value has been set.
func (o *BackupDto) GetOperateStatusOk() (*BackupStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OperateStatus, true
}

// SetOperateStatus sets field value
func (o *BackupDto) SetOperateStatus(v BackupStatus) {
	o.OperateStatus = v
}

// GetOptimizeStatus returns the OptimizeStatus field value
func (o *BackupDto) GetOptimizeStatus() BackupStatus {
	if o == nil {
		var ret BackupStatus
		return ret
	}

	return o.OptimizeStatus
}

// GetOptimizeStatusOk returns a tuple with the OptimizeStatus field value
// and a boolean to check if the value has been set.
func (o *BackupDto) GetOptimizeStatusOk() (*BackupStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OptimizeStatus, true
}

// SetOptimizeStatus sets field value
func (o *BackupDto) SetOptimizeStatus(v BackupStatus) {
	o.OptimizeStatus = v
}

func (o BackupDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["name"] = o.Name
	toSerialize["created"] = o.Created
	toSerialize["completed"] = o.Completed
	toSerialize["status"] = o.Status
	toSerialize["zeebeStatus"] = o.ZeebeStatus
	toSerialize["tasklistStatus"] = o.TasklistStatus
	toSerialize["operateStatus"] = o.OperateStatus
	toSerialize["optimizeStatus"] = o.OptimizeStatus
	return toSerialize, nil
}

func (o *BackupDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"name",
		"created",
		"completed",
		"status",
		"zeebeStatus",
		"tasklistStatus",
		"operateStatus",
		"optimizeStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBackupDto := _BackupDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBackupDto)

	if err != nil {
		return err
	}

	*o = BackupDto(varBackupDto)

	return err
}

type NullableBackupDto struct {
	value *BackupDto
	isSet bool
}

func (v NullableBackupDto) Get() *BackupDto {
	return v.value
}

func (v *NullableBackupDto) Set(val *BackupDto) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupDto) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupDto(val *BackupDto) *NullableBackupDto {
	return &NullableBackupDto{value: val, isSet: true}
}

func (v NullableBackupDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


